<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Daily Output | NexERP</title>
  <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
  <style>
    body, h1, h2, h3, h4, h5, h6, p, label, input, select, button {
      font-family: 'Poppins', sans-serif;
    }
    
    body {
      background-color: #f8f9fa;
    }
    
    .page-header {
      margin-bottom: 2rem;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .form-card {
      background: white;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.05);
      margin-bottom: 24px;
      padding: 24px;
      transition: all 0.3s ease;
    }
    
    .form-card:hover {
      box-shadow: 0 8px 15px rgba(0,0,0,0.1);
    }

    .form-control {
      border-radius: 4px;
      border: 1px solid #e0e0e0;
      padding: 8px 12px;
      transition: all 0.3s ease;
    }
    
    .form-control:focus {
      border-color: rgb(0,0,255);
      box-shadow: 0 0 0 3px rgba(0,0,255,0.1);
    }

    .nav-bar {
      background-color: rgb(0,0,255);
      color: white;
      box-shadow: 0 2px 10px rgba(0,0,255,0.3);
      position: sticky;
      top: 0;
      z-index: 100;
    }
    
    .nav-bar a {
      padding: 16px;
      font-weight: 500;
      letter-spacing: 0.3px;
      transition: background-color 0.3s;
    }
    
    .nav-bar a:hover {
      background-color: rgba(255,255,255,0.1);
    }
    
    .section-header {
      background-color: rgb(0,0,255);
      color: white;
      border-radius: 6px 6px 0 0;
      padding: 12px 16px;
      margin-bottom: 0;
      font-weight: 500;
      letter-spacing: 0.5px;
    }
    
    .section-content {
      background: white;
      border-radius: 0 0 6px 6px;
      border: 1px solid #e0e0e0;
      border-top: none;
      padding: 16px;
    }
    
    .btn {
      border-radius: 4px;
      font-weight: 500;
      padding: 8px 16px;
      transition: all 0.3s;
      cursor: pointer;
    }
    
    .btn-primary {
      background-color: rgb(0,0,255);
      color: white;
      border: none;
    }
    
    .btn-primary:hover {
      background-color: rgba(0,0,255,0.9);
      box-shadow: 0 4px 8px rgba(0,0,255,0.2);
    }
    
    .btn-secondary {
      background-color: #f5f5f5;
      color: #333;
      border: 1px solid #ddd;
    }
    
    .btn-secondary:hover {
      background-color: #eee;
    }
    
    .btn-danger {
      background-color: #dc3545;
      color: white;
      border: none;
    }
    
    .btn-danger:hover {
      background-color: #c82333;
      box-shadow: 0 4px 8px rgba(220,53,69,0.2);
    }
    
    .form-label {
      font-weight: 500;
      color: #555;
      margin-bottom: 6px;
      display: block;
    }
    
    .table-container {
      overflow-x: auto;
      border-radius: 6px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }
    
    .data-table {
      width: 100%;
      border-collapse: collapse;
    }
    
    .data-table th {
      background-color: #f8f9fa;
      font-weight: 600;
      text-align: left;
      padding: 12px 16px;
      border-bottom: 2px solid #e0e0e0;
    }
    
    .data-table td {
      padding: 12px 16px;
      border-bottom: 1px solid #eee;
    }
    
    .data-table tr:last-child td {
      border-bottom: none;
    }
    
    .data-table tr:hover {
      background-color: #f8f9fa;
    }
    
    .tag-outstanding {
      background-color: #ffc107;
      color: #212529;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 0.85rem;
      font-weight: 500;
    }
    
    .tag-completed {
      background-color: #28a745;
      color: white;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 0.85rem;
      font-weight: 500;
    }
    
    .select2-container--default .select2-selection--multiple {
      border: 1px solid #e0e0e0;
      border-radius: 4px;
    }
    
    .select2-container--default.select2-container--focus .select2-selection--multiple {
      border-color: rgb(0,0,255);
      box-shadow: 0 0 0 3px rgba(0,0,255,0.1);
    }
    
    .select2-container--default .select2-selection--multiple .select2-selection__choice {
      background-color: #f0f0f0;
      border: 1px solid #e0e0e0;
      border-radius: 4px;
    }
    
    footer {
      border-top: 1px solid #e0e0e0;
      padding: 16px;
      color: #6c757d;
      text-align: center;
      font-size: 0.9rem;
    }
    
    .w3-theme-l4 {
      background-color: #f5f7f8 !important;
    }
    
    .w3-theme {
      background-color: #2196F3 !important;
    }

    /* Animations */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .animate-fade-in {
      animation: fadeIn 0.4s ease-out;
    }

    /* Select2 custom styling to match other form elements */
    .select2-container--default .select2-selection--single {
      height: auto !important;
      padding: 8px 12px;
      border-radius: 4px;
      border: 1px solid #e0e0e0;
      background-color: white;
    }
    
    .select2-container--default .select2-selection--single .select2-selection__rendered {
      line-height: normal;
      padding: 0;
      font-family: 'Poppins', sans-serif;
      color: #333;
    }
    
    .select2-container--default .select2-selection--single .select2-selection__arrow {
      height: 100%;
      top: 0;
    }
    
    /* Additional style for dropdown items */
    .select2-dropdown {
      border: 1px solid #e0e0e0;
      border-radius: 4px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.1);
      max-height: none !important;
      z-index: 9999;
    }
    
    .select2-results__option {
      padding: 8px 12px;
      font-family: 'Poppins', sans-serif;
    }
    
    .select2-container--default .select2-results__option--highlighted[aria-selected] {
      background-color: rgb(0,0,255);
    }
    
    /* Enhanced styles for searchable dropdowns */
    .select2-search--dropdown .select2-search__field {
      padding: 8px;
      border-radius: 4px;
      border: 1px solid #e0e0e0;
      margin-bottom: 8px;
      font-family: 'Poppins', sans-serif;
    }
    
    .select2-search--dropdown .select2-search__field:focus {
      border-color: rgb(0,0,255);
      box-shadow: 0 0 0 3px rgba(0,0,255,0.1);
      outline: none;
    }

    /* Special styles for JO No Select2 */
    .jo-dropdown-select2 {
      width: 100% !important;
      max-height: none !important;
      overflow-y: visible !important;
    }
    
    .select2-results__options {
      max-height: 450px !important;
      overflow-y: auto !important;
    }
    
    .select2-results {
      max-height: none !important;
      overflow-y: visible !important;
    }
    
    /* Force heights to be equal for all inputs and selects */
    input.form-control, 
    select.form-control,
    .select2-container--default .select2-selection--single,
    .select2-container--default .select2-selection--multiple {
      height: 38px !important;
      box-sizing: border-box;
    }
    
    .select2-container {
      display: block;
      width: 100% !important;
    }

    /* Include styles for select2 to match PHP system styling */
    .jo-dropdown-select2 .select2-results__option {
      padding: 8px 12px;
      margin-bottom: 1px;
      cursor: pointer;
      font-size: 14px;
    }

    .jo-dropdown-select2 .select2-results__option--highlighted {
      background-color: #0000ff !important;
      color: white !important;
    }

    .jo-dropdown-select2 .select2-results__option[aria-selected=true] {
      background-color: #f0f0f0;
    }

    .jo-dropdown-select2 .select2-results__option:nth-child(odd) {
      background-color: #f9f9f9;
    }
    
    .jo-dropdown-select2 .select2-results__option:hover {
      background-color: #0000ff;
      color: white;
    }
    
    .jo-item {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    /* Operator dropdown specific styling */
    .operator-item {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding: 5px 0;
    }
    
    .select2-container .select2-selection--multiple .select2-selection__choice__display {
      padding-left: 8px;
    }
    
    /* When an operator is selected in the dropdown */
    .select2-selection__rendered .operator-code {
      color: #0000ff;
      font-weight: bold;
      margin-right: 5px;
      display: inline-block;
      min-width: 80px;
    }
  </style>
</head>
<body>

<div class="w3-bar nav-bar">
  <a href="/page/dashboard" class="w3-bar-item w3-button w3-mobile"><i class="fas fa-tachometer-alt"></i> Dashboard</a>
  <a href="/page/manufacture/daily_inquiry" class="w3-bar-item w3-button w3-mobile"><i class="fas fa-chart-line"></i> Sales</a>
  <a href="/page/purchasing" class="w3-bar-item w3-button w3-mobile"><i class="fas fa-shopping-cart"></i> Purchasing</a>
  <a href="/page/warehouse" class="w3-bar-item w3-button w3-mobile"><i class="fas fa-warehouse"></i> Warehouse</a>
  <a href="/page/manufacturing" class="w3-bar-item w3-button w3-mobile"><i class="fas fa-industry"></i> Manufacturing</a>
  <a href="/page/engineering" class="w3-bar-item w3-button w3-mobile"><i class="fas fa-cogs"></i> Engineering</a>
  <a href="/page/administration" class="w3-bar-item w3-button w3-mobile"><i class="fas fa-users-cog"></i> Administration</a>
  <a href="/page/aichat" class="w3-bar-item w3-button w3-mobile"><i class="fas fa-comment-dots"></i> AI Chat</a>
  <a href="/page/production_planning" class="w3-bar-item w3-button w3-mobile"><i class="fas fa-cog"></i> Production Planning</a>
</div>

<div id="main-content" class="w3-main" style="min-height: calc(100vh - 120px); padding: 24px;">
  <form id="dailyOutputForm" method="POST" action="/page/dailyc">
    <input type="hidden" name="txn-mode" value="<%= typeof txn_mode !== 'undefined' ? txn_mode : 'daily_new' %>">
    <input type="hidden" name="txn-id" value="<%= typeof txn_id !== 'undefined' ? txn_id : '0' %>">
    <input type="hidden" name="session-key" value="<%= typeof session_key !== 'undefined' ? session_key : '' %>">
    <input type="hidden" name="action-key" value="<%= typeof action_key !== 'undefined' ? action_key : '' %>">
    
    <!-- Include the UI components -->
    <%- include('ui', { 
      data: data, 
      options: options, 
      viewOnly: (data.txn_mode === 'daily_view'),
      lng: locals.lng || { 
        JO_NO: 'JO No', 
        DAILY_NO: 'Daily No', 
        TXN_DATE: 'Doc Date', 
        ISSUED_BY: 'Issued By'
      },
      machines: locals.machines || [],
      molds: locals.molds || [],
      tools: locals.tools || [],
      operators: locals.operators || [],
      owners: locals.owners || [{ id: user.id, name: user.name }]
    }) %>
  </form>
</div>

<!-- Loading indicator -->
<div id="loading-indicator" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 9999;">
  <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: white; padding: 20px; border-radius: 5px; text-align: center;">
    <div class="w3-spin" style="font-size: 24px;">
      <i class="fa fa-circle-notch"></i>
    </div>
    <p style="margin-top: 10px;">Loading process details...</p>
  </div>
</div>

<!-- Footer -->
<footer class="w3-container">
  <p>&copy; <%= new Date().getFullYear() %> NexERP. All rights reserved.</p>
</footer>

<!-- Scripts -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script>
  $(document).ready(function() {
    // Debug logging for dropdown initialization
    console.log('Document ready, initializing dropdowns...');
    
    // Initialize Select2 for all multiple select boxes
    $('select[multiple]').select2({
      placeholder: "Select items...",
      allowClear: true,
      width: '100%'
    });
    console.log('Multiple select boxes initialized');

    // Load machines from API instead of server-rendered data
    function loadMachines() {
      console.log('Starting to load machines...');
      
      // Don't load machines if we have process-specific ones
      if (window.processSpecificMachines) {
        console.log('Skipping general machine load - using process-specific machines');
        return;
      }
      
      $.ajax({
        url: '/api/manufacture/machines',
        method: 'GET',
        dataType: 'json',
        success: function(data) {
          // Don't override if process-specific machines were set while we were loading
          if (window.processSpecificMachines) {
            console.log('Process-specific machines set while loading - ignoring general machines');
            return;
          }
          
          if (data.success && data.machines) {
            console.log('Loaded machines:', data.machines.length);
            
            // Clear existing options
            $('#machine-descr').empty();
            
            // Add placeholder option
            $('#machine-descr').append(new Option('Select machine', '', true, true));
            
            // Add machines from API
            data.machines.forEach(function(machine) {
              const option = new Option(machine.name, machine.id, false, false);
              $('#machine-descr').append(option);
            });
            
            // Destroy and recreate Select2 to ensure clean state
            if ($('#machine-descr').hasClass('select2-hidden-accessible')) {
              $('#machine-descr').select2('destroy');
            }
            
            // Reinitialize Select2 for the machine dropdown with matching styles to JO dropdown
            $('#machine-descr').select2({
              placeholder: 'Select machine',
              allowClear: false, // Remove the x button
              width: '100%',
              dropdownParent: $('#machine-descr').parent(),
              dropdownCssClass: 'jo-dropdown-select2',
              templateResult: formatMachine
            });
            
            console.log('Machine dropdown Select2 initialized with JO styles');
          } else {
            console.error('Error loading machines:', data.message || 'Unknown error');
          }
        },
        error: function(err) {
          console.error('Error fetching machines:', err);
        }
      });
    }
    
    // Function to format the machine display like JO
    function formatMachine(state) {
      if (!state.id) {
        return state.text;
      }
      
      var $state = $(
        '<div class="jo-item">' + state.text + '</div>'
      );
      
      return $state;
    }
    
    // Call the function to load machines
    loadMachines();

    // Load molds from API
    function loadMolds() {
      console.log('Starting to load molds...');
      
      // Don't load molds if we have process-specific ones
      if (window.processSpecificMolds) {
        console.log('Skipping general mold load - using process-specific molds');
        return;
      }
      
      $.ajax({
        url: '/api/manufacture/molds',
        method: 'GET',
        dataType: 'json',
        success: function(data) {
          // Don't override if process-specific molds were set while we were loading
          if (window.processSpecificMolds) {
            console.log('Process-specific molds set while loading - ignoring general molds');
            return;
          }
          
          if (data.success && data.molds) {
            console.log('Loaded molds:', data.molds.length);
            
            // Clear existing options
            $('#mold-descr').empty();
            
            // Initialize Select2 first to prevent issues
            if ($('#mold-descr').hasClass("select2-hidden-accessible")) {
              $('#mold-descr').select2('destroy');
            }
            
            // Create placeholder for multiple select
            $('#mold-descr').html('');
            
            // Add molds from API
            data.molds.forEach(function(mold) {
              const option = new Option(mold.name, mold.id, false, false);
              $('#mold-descr').append(option);
            });
            
            // Initialize Select2 for the mold dropdown with matching styles to JO dropdown
            $('#mold-descr').select2({
              placeholder: 'Select items...',
              allowClear: false,
              width: '100%',
              dropdownParent: $('#mold-descr').parent(),
              dropdownCssClass: 'jo-dropdown-select2',
              templateResult: formatDropdownItem
            });
            
            console.log('Mold dropdown Select2 initialized with JO styles');
          } else {
            console.error('Error loading molds:', data.message || 'Unknown error');
          }
        },
        error: function(err) {
          console.error('Error fetching molds:', err);
        }
      });
    }
    
    // Load tools from API
    function loadTools() {
      console.log('Starting to load tools...');
      $.ajax({
        url: '/api/manufacture/tools',
        method: 'GET',
        dataType: 'json',
        success: function(data) {
          if (data.success && data.tools) {
            console.log('Loaded tools:', data.tools.length);
            
            // Clear existing options
            $('#tool-descr').empty();
            
            // Initialize Select2 first to prevent issues
            if ($('#tool-descr').hasClass("select2-hidden-accessible")) {
              $('#tool-descr').select2('destroy');
            }
            
            // Create placeholder for multiple select
            $('#tool-descr').html('');
            
            // Add tools from API
            data.tools.forEach(function(tool) {
              const option = new Option(tool.name, tool.id, false, false);
              $('#tool-descr').append(option);
            });
            
            // Initialize Select2 for the tool dropdown with matching styles to JO dropdown
            $('#tool-descr').select2({
              placeholder: 'Select items...',
              allowClear: false,
              width: '100%',
              dropdownParent: $('#tool-descr').parent(),
              dropdownCssClass: 'jo-dropdown-select2',
              templateResult: formatDropdownItem
            });
            
            console.log('Tool dropdown Select2 initialized with JO styles');
          } else {
            console.error('Error loading tools:', data.message || 'Unknown error');
          }
        },
        error: function(err) {
          console.error('Error fetching tools:', err);
        }
      });
    }
    
    // Load operators from API
    function loadOperators() {
      console.log('Starting to load operators...');
      $.ajax({
        url: '/api/manufacture/operators',
        method: 'GET',
        dataType: 'json',
        success: function(data) {
          if (data.success && data.operators) {
            console.log('Loaded operators:', data.operators.length);
            
            // COMPLETELY DESTROY AND REBUILD the operator dropdown
            if ($('#operator-descr').hasClass("select2-hidden-accessible")) {
              $('#operator-descr').select2('destroy');
            }
            
            // Empty the select element
            $('#operator-descr').empty();
            
            // Add operators to the dropdown with SIMPLE text
            data.operators.forEach(function(operator) {
              // Create a display text with the ID and name (this is what will show in dropdown)
              var displayText = '';
              
              if (operator.abbrev) {
                displayText = operator.abbrev + ' ' + operator.name;
              } else {
                displayText = operator.name;
              }
              
              // Create the option with this text
              var option = new Option(displayText, operator.id, false, false);
              $('#operator-descr').append(option);
            });
            
            // Initialize Select2 for the dropdown with PLAIN format (no template)
            $('#operator-descr').select2({
              placeholder: 'Select operators...',
              allowClear: false,
              width: '100%'
            });
            
            console.log('Operator dropdown initialized with plain text');
          } else {
            console.error('Error loading operators:', data.message || 'Unknown error');
          }
        },
        error: function(err) {
          console.error('Error fetching operators:', err);
        }
      });
    }
    
    // Format operator items to highlight the ID portion
    function formatOperatorItem(state) {
      if (!state.id) {
        return state.text;
      }
      
      var text = state.text;
      var $option = $(state.element);
      var abbrev = $option.data('abbrev');
      var name = $option.data('name');
      
      // Check if we have both abbrev and name data
      if (abbrev && name) {
        // Format with blue code + name
        return $('<div class="operator-item">' +
                '<span style="color:#0000ff; font-weight:bold; display:inline-block; width:60px;">' + 
                abbrev + '</span>&nbsp;' + name + '</div>');
      } else {
        // If display text contains the code pattern (A###), extract and format it
        var parts = text.split(' ');
        if (parts.length > 0 && /^[A-Z]\d{3}$/.test(parts[0])) {
          return $('<div class="operator-item">' +
                '<span style="color:#0000ff; font-weight:bold; display:inline-block; width:60px;">' + 
                parts[0] + '</span>&nbsp;' + parts.slice(1).join(' ') + '</div>');
        } else {
          // Fallback - just show the text as is
          return $('<div class="operator-item">' + text + '</div>');
        }
      }
    }
    
    // Generic function to format dropdown items (for other dropdowns)
    function formatDropdownItem(state) {
      if (!state.id) {
        return state.text;
      }
      
      var $state = $(
        '<div class="jo-item">' + state.text + '</div>'
      );
      
      return $state;
    }
    
    // Call all the loading functions
    loadMachines();
    loadMolds();
    loadTools();
    loadOperators();

    // Initialize datepicker for date inputs
    $('#txn-date').datepicker({
      dateFormat: 'dd-mm-yy',
      changeMonth: true,
      changeYear: true
    });
    
    // JO No dropdown functionality
    var joReferenceTimer;
    
    // Initialize select2 for JO No
    $('#jo-reference').select2({
      placeholder: 'Select JO No',
      allowClear: true,
      width: '100%',
      dropdownParent: $('#jo-reference').parent(),
      dropdownCssClass: 'jo-dropdown-select2',
      minimumInputLength: 0,
      dropdownAutoWidth: true,
      templateResult: formatJobOrder
    }).on("select2:opening", function(){
      // Increase dropdown height when opening
      setTimeout(function() {
        $('.select2-results__options').css('max-height', '500px');
      }, 0);
    });
    
    // Function to format the job order display
    function formatJobOrder(state) {
      if (!state.id) {
        return state.text;
      }
      
      var $state = $(
        '<div class="jo-item">' + state.text + '</div>'
      );
      
      return $state;
    }
    
    // Immediately load all job orders after initializing Select2
    $.ajax({
      url: '/api/manufacture/job-orders',
      dataType: 'json',
      data: { 
        search: '' 
      },
      beforeSend: function() {
        console.log('Sending job order request to API...');
      },
      success: function(data) {
        console.log('Loaded job orders:', data.job_orders.length);
        console.log('First 5 job orders:', data.job_orders.slice(0, 5));
        
        // For debugging: Count occurrences of each prefix
        const prefixCounts = {};
        data.job_orders.forEach(jo => {
          const prefix = jo.reference.substring(0, 4);
          prefixCounts[prefix] = (prefixCounts[prefix] || 0) + 1;
        });
        console.log('Prefix counts in frontend:', prefixCounts);
        
        // Destroy and recreate the Select2 to ensure clean state
        $('#jo-reference').select2('destroy');
        
        // Clear existing options
        $('#jo-reference').empty();
        console.log('Cleared existing options');
        
        // Add a placeholder option
        $('#jo-reference').append(new Option('Select JO No', '', true, true));
        
        // Show an alert if no job orders found
        if (data.job_orders.length === 0) {
          console.error('NO JOB ORDERS FOUND IN DATABASE!');
          alert('No job orders found in database. Please contact system administrator.');
          return;
        }
        
        // Add specific job orders from our recent search first
        const specialJobOrders = [
          'JOTR23050306', 
          'JO23060150', 
          'JO23060216', 
          'JO23060227', 
          'JO23060245', 
          'JO23060246'
        ];
        
        // Check if special JOs exist in the data
        console.log('Checking for special job orders...');
        specialJobOrders.forEach(reference => {
          const matchingJO = data.job_orders.find(jo => jo.reference === reference);
          if (matchingJO) {
            console.log('Found special JO:', reference);
          } else {
            console.warn('Special JO not found in database:', reference);
          }
        });
        
        // Find and add these specific JOs first
        let specialJOsFound = 0;
        specialJobOrders.forEach(reference => {
          const matchingJO = data.job_orders.find(jo => jo.reference === reference);
          if (matchingJO) {
            const option = new Option(matchingJO.display, matchingJO.reference, false, false);
            $(option).data('jo_id', matchingJO.id);
            $('#jo-reference').append(option);
            specialJOsFound++;
          }
        });
        console.log('Special JOs added to dropdown:', specialJOsFound);
        
        // Add the rest of the job orders
        let otherJOsAdded = 0;
        data.job_orders.forEach(function(jo) {
          // Skip if already added as a special job order
          if (!specialJobOrders.includes(jo.reference)) {
            const option = new Option(jo.display, jo.reference, false, false);
            $(option).data('jo_id', jo.id);
            $('#jo-reference').append(option);
            otherJOsAdded++;
          }
        });
        
        console.log('Added', otherJOsAdded, 'regular job orders to dropdown');
        console.log('Total options in dropdown:', specialJOsFound + otherJOsAdded + 1); // +1 for placeholder
        
        // Reinitialize Select2 with all data preloaded
        $('#jo-reference').select2({
          placeholder: 'Select JO No',
          allowClear: true,
          width: '100%',
          dropdownParent: $('#jo-reference').parent(),
          dropdownCssClass: 'jo-dropdown-select2',
          templateResult: formatJobOrder,
          matcher: function(params, data) {
            // If there is no search term, return all data
            if ($.trim(params.term) === '') {
              return data;
            }
            
            // Skip if empty
            if (!data.text) {
              return null;
            }
            
            // Search in the text (case insensitive)
            if (data.text.toLowerCase().indexOf(params.term.toLowerCase()) > -1) {
              return data;
            }
            
            // If it doesn't contain the term, don't return anything
            return null;
          }
        });
        console.log('Reinitialized Select2 dropdown');
      },
      error: function(err) {
        console.error('Error loading job orders:', err);
        console.error('Error details:', err.responseText || 'No response text available');
      }
    });
    
    // Handle JO selection
    $('#jo-reference').on('select2:select', function(e) {
      const data = e.params.data;
      if (data) {
        // Get jo_id from data attribute or use a fallback method
        const jo_id = $(data.element).data('jo_id') || data.jo_id;
        
        // Set jo_id hidden input
        $('#jo-id').val(jo_id);
        
        // Enable form fields
        $('#jo-process').prop('disabled', false);
        
        // Make an AJAX request to fetch JO details
        $.ajax({
          url: '/api/manufacture/jo-details',
          type: 'GET',
          data: { reference: data.id },
          success: function(response) {
            if (response.success) {
              // Enable machine, mold, tool, and operator selections
              $('#machine-descr, #mold-descr, #tool-descr, #operator-descr').prop('disabled', false);
              
              // Clear and populate process dropdown with options from the job order
              $('#jo-process').empty();
              $('#jo-process').append('<option value="">Select Process</option>');
              
              if (response.processes && response.processes.length > 0) {
                response.processes.forEach(function(process) {
                  $('#jo-process').append(`<option value="${process.name}">${process.name}</option>`);
                });
                
                // If there's a default process, select it
                if (response.process) {
                  $('#jo-process').val(response.process);
                }
              }
              
              // Update Daily No if needed
              if (response.dailyNo) {
                $('#doc-ref').val(response.dailyNo);
              }
            }
          },
          error: function(err) {
            console.error('Error fetching JO details:', err);
            alert('Error fetching job order details. Please try again.');
          }
        });
      }
    });
    
    // Clear other fields when JO is cleared
    $('#jo-reference').on('select2:clear', function() {
      $('#jo-id').val('');
      $('#jo-process').prop('disabled', true);
      $('#machine-descr, #mold-descr, #tool-descr, #operator-descr').prop('disabled', true);
      
      // Reset process dropdown
      $('#jo-process').empty();
      $('#jo-process').append('<option value="">Select Process</option>');
    });

    // JO Reference change handler (for backward compatibility)
    $('#jo-reference').on('change', function() {
      const joRef = $(this).val();
      if (joRef) {
        // Enable form fields
        $('#jo-process').prop('disabled', false);
        
        // Make an AJAX request to fetch JO details
        $.ajax({
          url: '/api/manufacture/jo-details',
          type: 'GET',
          data: { reference: joRef },
          success: function(response) {
            if (response.success) {
              // Enable machine, mold, tool, and operator selections
              $('#machine-descr, #mold-descr, #tool-descr, #operator-descr').prop('disabled', false);
              
              // Clear and populate process dropdown with options from the job order
              $('#jo-process').empty();
              $('#jo-process').append('<option value="">Select Process</option>');
              
              if (response.processes && response.processes.length > 0) {
                response.processes.forEach(function(process) {
                  $('#jo-process').append(`<option value="${process.name}">${process.name}</option>`);
                });
                
                // If there's a default process, select it
                if (response.process) {
                  $('#jo-process').val(response.process);
                  // Trigger change event to load output items
                  $('#jo-process').trigger('change');
                }
              }
              
              // Update Daily No if needed
              if (response.dailyNo) {
                $('#doc-ref').val(response.dailyNo);
              }
            }
          },
          error: function(err) {
            console.error('Error fetching JO details:', err);
            alert('Error fetching job order details. Please try again.');
          }
        });
      } else {
        // Disable selections when JO reference is empty
        $('#jo-process, #machine-descr, #mold-descr, #tool-descr, #operator-descr').prop('disabled', true);
        
        // Reset process dropdown
        $('#jo-process').empty();
        $('#jo-process').append('<option value="">Select Process</option>');
      }
    });
    
    // Process change handler to load output and input items
    $('#jo-process').on('change', function() {
      const processId = $(this).val();
      const joId = $('#jo-id').val();
      
      if (processId && joId) {
        console.log('Loading process details for JO ID:', joId, 'Process:', processId);
        
        // Show loading indicator
        $('#loading-indicator').show();
        
        // Make an AJAX request to fetch process details including output/input items
        $.ajax({
          url: '/api/manufacture/jo-process-details',
          type: 'GET',
          data: { 
            jo_id: joId,
            process_id: processId
          },
          success: function(response) {
            if (response.success) {
              console.log('Process details loaded successfully:', {
                machines: response.machines?.length || 0,
                molds: response.molds?.length || 0,
                inputItems: response.input_items?.length || 0
              });
              
              // Cancel any other machine/mold loading that might be in progress
              if (window.machineLoadTimer) clearTimeout(window.machineLoadTimer);
              if (window.moldLoadTimer) clearTimeout(window.moldLoadTimer);
              
              // Flag to prevent global loaders from overriding our selections
              window.processSpecificMachines = true;
              window.processSpecificMolds = true;
              
              // Set machines if available
              if (response.machines && response.machines.length > 0) {
                console.log('Setting machines:', response.machines.map(m => m.name).join(', '));
                
                // Get the select element - IMPORTANT: This is a multiple select
                const $machineSelect = $('#machine-descr');
                
                // Clear and reinitialize select if needed
                if ($machineSelect.hasClass('select2-hidden-accessible')) {
                  $machineSelect.select2('destroy');
                }
                
                // Clear existing options
                $machineSelect.empty();
                
                // Add the machine options WITH selected=true for multiple select
                response.machines.forEach(function(machine) {
                  const option = new Option(machine.name, machine.id, true, true);
                  $machineSelect.append(option);
                });
                
                // Reinitialize Select2 properly for multiple select
                $machineSelect.select2({
                  placeholder: 'Select machines...',
                  width: '100%',
                  allowClear: true,
                  multiple: true
                });
                
                // For multiple select, we need to set the values after initialization
                $machineSelect.val(response.machines.map(m => m.id)).trigger('change');
                
                // Enable the select
                $machineSelect.prop('disabled', false);
                
                // Log what we've set
                console.log('Machine dropdown now contains:', Array.from($machineSelect.find('option')).map(o => o.text));
                console.log('Selected machine values:', $machineSelect.val());
              } else {
                console.warn('No machines found for this process');
                $('#machine-descr').empty().prop('disabled', true);
              }
              
              // Set molds if available
              if (response.molds && response.molds.length > 0) {
                console.log('Setting molds:', response.molds.map(m => m.name).join(', '));
                
                // Get the select element - IMPORTANT: This is a multiple select
                const $moldSelect = $('#mold-descr');
                
                // Clear and reinitialize select if needed
                if ($moldSelect.hasClass('select2-hidden-accessible')) {
                  $moldSelect.select2('destroy');
                }
                
                // Clear existing options
                $moldSelect.empty();
                
                // Add the mold options WITH selected=true for multiple select
                response.molds.forEach(function(mold) {
                  const option = new Option(mold.name, mold.id, true, true);
                  $moldSelect.append(option);
                });
                
                // Reinitialize Select2 properly for multiple select
                $moldSelect.select2({
                  placeholder: 'Select molds...',
                  width: '100%',
                  allowClear: true,
                  multiple: true
                });
                
                // For multiple select, we need to set the values after initialization
                $moldSelect.val(response.molds.map(m => m.id)).trigger('change');
                
                // Enable the select
                $moldSelect.prop('disabled', false);
                
                // Log what we've set
                console.log('Mold dropdown now contains:', Array.from($moldSelect.find('option')).map(o => o.text));
                console.log('Selected mold values:', $moldSelect.val());
              } else {
                console.warn('No molds found for this process');
                $('#mold-descr').empty().prop('disabled', true);
              }
              
              // Set output items
              if (response.jo_details && response.jo_details.output_item) {
                console.log('Setting output item:', response.jo_details.output_item.name);
                
                // Clear existing table
                $('#output-items-table').empty();
                
                // Add the output item row
                const outputItem = response.jo_details.output_item;
                const outputRowHtml = `
                  <tr>
                    <td class="output-item-index">1</td>
                    <td>
                      <select class="output-product-select" name="output_items[0][product_id]" style="width:100%">
                        <option value="${outputItem.id}" selected>${outputItem.code} - ${outputItem.name}</option>
                      </select>
                    </td>
                    <td><input type="number" class="w3-input output-qty" name="output_items[0][output_qty]" value="${outputItem.quantity}" min="0" step="0.01"></td>
                    <td><input type="number" class="w3-input reject-qty" name="output_items[0][reject_qty]" value="0" min="0" step="0.01"></td>
                    <td><input type="number" class="w3-input extra-qty" name="output_items[0][extra_qty]" value="0" min="0" step="0.01"></td>
                    <td><span class="total-output">${outputItem.quantity}</span></td>
                    <td><input type="number" class="w3-input outstanding-qty" name="output_items[0][outstanding_qty]" value="0" min="0" step="0.01"></td>
                    <td><button type="button" class="w3-button remove-output-item"><i class="fas fa-trash-alt"></i></button></td>
                  </tr>
                `;
                $('#output-items-table').append(outputRowHtml);
                
                // Initialize Select2 for the output item
                $('#output-items-table .output-product-select').select2({
                  placeholder: "Select product",
                  width: '100%'
                });
              } else {
                $('#output-items-table').html('<tr><td colspan="9" class="w3-center">No output items</td></tr>');
              }
              
              // Set input items
              if (response.input_items && response.input_items.length > 0) {
                console.log('Setting input items:', response.input_items.length);
                console.log('Input items sample:', response.input_items[0]);
                
                // Clear existing table
                $('#input-items-table').empty();
                
                // Add input item rows
                response.input_items.forEach(function(item, index) {
                  console.log(`Input item ${index}:`, item);
                  const inputRowHtml = `
                    <tr>
                      <td class="input-item-index">${index + 1}</td>
                      <td>
                        <select class="input-product-select" name="input_items[${index}][product_id]" style="width:100%">
                          <option value="${item.id}" selected>${item.code} - ${item.name}</option>
                        </select>
                      </td>
                      <td>${parseFloat(item.qty_balance) || 0}</td>
                      <td><input type="number" class="w3-input demand-qty" name="input_items[${index}][demand_qty]" value="${parseFloat(item.qty_required) || 0}" min="0" step="0.01"></td>
                      <td>${item.lot || ''}</td>
                      <td><button type="button" class="w3-button remove-input-item"><i class="fas fa-trash-alt"></i></button></td>
                    </tr>
                  `;
                  $('#input-items-table').append(inputRowHtml);
                  
                  // Initialize Select2 for each input item
                  const $select = $('#input-items-table .input-product-select').last();
                  $select.select2({
                    placeholder: "Select product",
                    width: '100%'
                  });
                });
              } else {
                $('#input-items-table').html('<tr><td colspan="7" class="w3-center">No input items</td></tr>');
              }
              
              // Hide loading indicator
              $('#loading-indicator').hide();
            } else {
              console.error('Error in process details response:', response.message);
              alert('Error loading process details: ' + (response.message || 'Unknown error'));
              $('#loading-indicator').hide();
            }
          },
          error: function(err) {
            console.error('Error fetching process details:', err);
            console.error('Error details:', err.responseText || 'No response text available');
            alert('Error loading process details. Please try again.');
            $('#loading-indicator').hide();
          }
        });
      } else {
        // Clear items if no process is selected
        $('#machine-descr, #mold-descr').empty().prop('disabled', true);
        $('#output-items-table').html('<tr><td colspan="9" class="w3-center">No output items</td></tr>');
        $('#input-items-table').html('<tr><td colspan="7" class="w3-center">No input items</td></tr>');
      }
    });
    
    // Output quantity calculations
    function calculateOutputTotals(row) {
      const outputQty = parseFloat(row.find('.output-qty').val()) || 0;
      const rejectQty = parseFloat(row.find('.reject-qty').val()) || 0;
      const extraQty = parseFloat(row.find('.extra-qty').val()) || 0;
      const totalOutput = outputQty + rejectQty + extraQty;
      
      row.find('.total-output').text(totalOutput.toFixed(2));
    }
    
    // Add event listener for quantity changes
    $(document).on('change keyup', '.output-qty, .reject-qty, .extra-qty, .outstanding-qty', function() {
      calculateOutputTotals($(this).closest('tr'));
    });
    
    // Add output item button handler
    $('#add-output-item').on('click', function() {
      // Get the template HTML
      let template = $('#output-item-template').html();
      
      // Calculate the next index
      const index = $('#output-items-table tr').length + 1;
      
      // Replace {index} with actual index
      template = template.replace(/{index}/g, index);
      
      // Add the row to the table
      $('#output-items-table').append(template);
      
      // Initialize Select2 for the new row
      $('#output-items-table tr:last-child .output-product-select').select2({
        placeholder: "Select product",
        width: '100%'
      });
      
      // If there's a "No output items" message, remove it
      if ($('#output-items-table td[colspan]').length) {
        $('#output-items-table').html(template);
      }
    });
    
    // Remove output item button handler
    $(document).on('click', '.remove-output-item', function() {
      const row = $(this).closest('tr');
      
      // Remove the row
      row.remove();
      
      // Reindex the remaining rows
      $('#output-items-table tr').each(function(index) {
        $(this).find('.output-item-index').text(index + 1);
      });
      
      // If no rows left, show "No output items" message
      if ($('#output-items-table tr').length === 0) {
        $('#output-items-table').html('<tr><td colspan="9" class="w3-center">No output items</td></tr>');
      }
    });
    
    // Add input item button handler
    $('#add-input-item').on('click', function() {
      // Get the template HTML
      let template = $('#input-item-template').html();
      
      // Calculate the next index
      const index = $('#input-items-table tr').length + 1;
      
      // Replace {index} with actual index
      template = template.replace(/{index}/g, index);
      
      // Add the row to the table
      $('#input-items-table').append(template);
      
      // Initialize Select2 for the new row
      $('#input-items-table tr:last-child .input-product-select').select2({
        placeholder: "Select product",
        width: '100%'
      });
      
      // If there's a "No input items" message, remove it
      if ($('#input-items-table td[colspan]').length) {
        $('#input-items-table').html(template);
      }
    });
    
    // Remove input item button handler
    $(document).on('click', '.remove-input-item', function() {
      const row = $(this).closest('tr');
      
      // Remove the row
      row.remove();
      
      // Reindex the remaining rows
      $('#input-items-table tr').each(function(index) {
        $(this).find('.input-item-index').text(index + 1);
      });
      
      // If no rows left, show "No input items" message
      if ($('#input-items-table tr').length === 0) {
        $('#input-items-table').html('<tr><td colspan="7" class="w3-center">No input items</td></tr>');
      }
    });
    
    // Add tool item button handler (if needed)
    $('#add-tool-item').on('click', function() {
      // Similar implementation as add-output-item
      let template = $('#tool-item-template').html();
      const index = $('#tool-items-table tr').length + 1;
      template = template.replace(/{index}/g, index);
      $('#tool-items-table').append(template);
      
      // Initialize Select2 for the new row
      $('#tool-items-table tr:last-child .tool-select').select2({
        placeholder: "Select tool",
        width: '100%'
      });
      
      if ($('#tool-items-table td[colspan]').length) {
        $('#tool-items-table').html(template);
      }
    });
    
    // Remove tool item button handler
    $(document).on('click', '.remove-tool-item', function() {
      const row = $(this).closest('tr');
      row.remove();
      
      $('#tool-items-table tr').each(function(index) {
        $(this).find('.tool-item-index').text(index + 1);
      });
      
      if ($('#tool-items-table tr').length === 0) {
        $('#tool-items-table').html('<tr><td colspan="5" class="w3-center">No tools</td></tr>');
      }
    });
    
    // Product selection change handler
    $(document).on('change', '.output-product-select', function() {
      const productId = $(this).val();
      const row = $(this).closest('tr');
      
      if (productId) {
        // Make an AJAX request to fetch product details
        $.ajax({
          url: '/api/manufacture/product-details',
          type: 'GET',
          data: { product_id: productId },
          success: function(response) {
            if (response.success) {
              // Update outstanding value if available
              if (response.outstanding) {
                row.find('.outstanding').text(response.outstanding);
              }
            }
          },
          error: function(err) {
            console.error('Error fetching product details:', err);
          }
        });
      }
    });
    
    // Form submission handler
    $('#dailyOutputForm').on('submit', function(e) {
      // Add validation if needed
      let isValid = true;
      const purpose = $('#purpose-option').val();
      const joRef = $('#jo-reference').val();
      
      if (!purpose) {
        alert('Please select a purpose');
        isValid = false;
      }
      
      if (!joRef && purpose === 'S') {
        alert('Please enter a JO reference');
        isValid = false;
      }
      
      // Check if at least one output item exists for normal output
      if (purpose === 'S' && $('#output-items-table tr').length <= 1 && $('#output-items-table td[colspan]').length > 0) {
        alert('Please add at least one output item');
        isValid = false;
      }
      
      if (!isValid) {
        e.preventDefault();
        return false;
      }
      
      // Continue with form submission
      return true;
    });
    
    // Initialize time fields to allow only valid times
    $('.time-input').on('change', function() {
      const timeValue = $(this).val();
      // Simple validation for time format
      if (timeValue && !/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/.test(timeValue)) {
        alert('Please enter a valid time in the format HH:MM');
        $(this).val('');
      }
    });
    
    // Void button handler
    $('.void-button').on('click', function() {
      const txnId = $(this).data('id');
      if (confirm('Are you sure you want to void this record?')) {
        $.ajax({
          url: '/api/manufacture/daily-output/void/' + txnId,
          type: 'POST',
          success: function(response) {
            if (response.success) {
              alert('Record voided successfully');
              location.href = '/page/manufacture/daily_inquiry';
            } else {
              alert('Error: ' + response.message);
            }
          },
          error: function() {
            alert('Server error while attempting to void record');
          }
        });
      }
    });
    
    // Calculate time difference for break time
    function calculateTimeDifference(startTime, endTime) {
      if (!startTime || !endTime) return 0;
      
      const [startHour, startMinute] = startTime.split(':').map(Number);
      const [endHour, endMinute] = endTime.split(':').map(Number);
      
      let startMinutes = startHour * 60 + startMinute;
      let endMinutes = endHour * 60 + endMinute;
      
      // Handle if end time is on the next day
      if (endMinutes < startMinutes) {
        endMinutes += 24 * 60;
      }
      
      return endMinutes - startMinutes;
    }
    
    // Update calculated fields when time changes
    $('#start-time, #end-time').on('change', function() {
      const startTime = $('#start-time').val();
      const endTime = $('#end-time').val();
      
      if (startTime && endTime) {
        const diffInMinutes = calculateTimeDifference(startTime, endTime);
        // If break time is not manually set, suggest a default
        if (!$('#break-time').data('manual')) {
          // Suggest 60 minutes if shift is longer than 5 hours
          const suggestedBreak = diffInMinutes > 300 ? 60 : 0;
          $('#break-time').val(suggestedBreak);
        }
      }
    });
    
    // Mark break time as manually set when changed
    $('#break-time').on('change', function() {
      $(this).data('manual', true);
    });
    
    // Initialize existing quantity fields
    $('.output-qty, .reject-qty, .extra-qty').each(function() {
      calculateOutputTotals($(this).closest('tr'));
    });
  });
</script>
</body>
</html>
